name: "Caching"

on:
  schedule:
    # https://crontab.guru/#30_5,17_*_*_*
    # * is a special character in YAML so you have to quote this string
    - cron: "0 0 * * *"
  pull_request:
  push:
  workflow_dispatch:

env:
  extra_nix_config: |
    access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
    substituters = https://cache.nixos.org/ https://nix-community.cachix.org https://hydra.iohk.io https://haskell-language-server.cachix.org https://br4ch1st0chr0n3.cachix.org
    trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ= haskell-language-server.cachix.org-1:juFfHrwkOxqIOZShtC4YC1uT1bBcq2RSvC7OMKx0Nz8= br4ch1st0chr0n3.cachix.org-1:o1FA93L5vL4LWi+jk2ECFk1L1rDlMoTH21R1FHtSKaU=
  install_url: https://releases.nixos.org/nix/nix-2.11.1/install
  main_os: ubuntu-20.04
  action: |
    git pull --rebase --autostash
    nix run {0} {1}
    git diff --exit-code || git commit -a -m "action: {2}"
    git push
  config_git_actions: |
    git config user.name github-actions
    git config user.email github-actions@github.com

  app_purescript: app_purescript
  app_python: app_python

jobs:
  changed-files:
    runs-on: ubuntu-latest
    outputs:
      output: ${{ steps.changed-files-specific.outputs.workflows }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get changed files for app_purescript
        id: changed-files-specific
        uses: tj-actions/changed-files@v32
        with:
          sha: ${{ github.sha }}
          files: |
            app_purescript/**
      - name: app_python/**

  caching:
    name: Build on ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v17
        with:
          extra_nix_config: ${{ env.extra_nix_config }}
          install_url: ${{ env.install_url }}
      - name: config git
        run: ${{ env.config_git_actions }}

      - name: Update locks
        env:
          command: .#updateLocks
          msg: update locks
        if: ${{ matrix.os == env.main_os }}
        run: ${{ format(env.action, env.command, '', env.msg) }}

      - name: Log in to Cachix
        uses: cachix/cachix-action@v10
        with:
          name: ${{ secrets.CACHIX_CACHE }}
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Cache flakes
        run: CACHIX_CACHE=${{ secrets.CACHIX_CACHE }} nix run .#pushToCachix

  read-configs:
    runs-on: ubuntu-latest
    outputs:
      app-ci-matrix: ${{ steps.app-ci-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - id: app-ci-matrix
        run: echo "::set-output name=matrix::$(jq -c . < .github/workflows/configs/app-ci.json)"

  app-ci:
    needs: read-configs
    name: CI for ${{ matrix.app }} project
    strategy:
      matrix: ${{ fromJSON(needs.read-configs.outputs.app-ci-matrix) }}
    defaults:
      run:
        working-directory: ${{ matrix.app }}
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v17
        with:
          extra_nix_config: ${{ env.extra_nix_config }}
          install_url: ${{ env.install_url }}
      # - Nix will install the dependencies on demand

      - name: Linting
      # - No need to lint PureScript since it's strongly statically typed
        if: ${{ matrix.app == env.app_python }}
        run: nix run .#lint

      - name: Build app
        # No need to build app_python as it's an interpretable lang
        if: ${{ matrix.app == env.app_purescript }}
        run: nix run .#build

      - name: Run Snyk to check for vulnerabilities ${{ matrix.snyk-language-title }}
        uses: snyk/actions/${{ matrix.snyk-language }}@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Test
        # For now, I was unable to make Firefox tests work in GH actions
        # if: ${{ matrix.app == 'app_python' }}
        run: nix run .#test

  # snyk-checks:``
  #   runs-on: ubuntu-20.04
  #   name: Snyk vulnerability check for ${{  }} (Node.js)
  #   defaults:
  #     run:
  #       working-directory: app_purescript
  #   strategy:
  #     matrix:
  #       apps: [app_purescript, app_python]
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: cachix/install-nix-action@v17
  #       with:
  #         extra_nix_config: ${{ env.extra_nix_config }}
  #         install_url: ${{ env.install_url }}
  #     - name: Build the app
  #       run: nix run .#build
  #     - name: Install deps
  #       run: nix profile install nixpkgs#python310Full
  #     - name: Run Snyk to check for vulnerabilities
  #       uses: snyk/actions/node@master
  #       continue-on-error: true
  #       env:
  #         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # snyk-test-app-python:
  #   runs-on: ubuntu-20.04
  #   name: Snyk vulnerability check for app_python
  #   defaults:
  #     run:
  #       working-directory: app_python
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Run Snyk to check for vulnerabilities
  #       uses: snyk/actions/python@master
  #       continue-on-error: true
  #       env:
  #         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  push-to-docker-hub:
    name: Push ${{ matrix.app }} to Docker Hub
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        app: [app_purescript, app_python]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Hadolint Action
        uses: hadolint/hadolint-action@v2.0.0
        with:
          no-fail: true
          verbose: true
          dockerfile: ${{ matrix.app }}/Dockerfile
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PAT }}
      # TODO add linters and tests
      - name: Build and push
        uses: docker/build-push-action@v3
        env:
          DOCKER_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        with:
          # https://github.com/docker/build-push-action#path-context
          context: ${{ matrix.app }}
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ matrix.app }}:latest
